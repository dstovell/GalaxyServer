<% 	
	var viewportWidth = 1000;
	var viewportHeight = 1000;
	console.log('page started');
%>

<script>

	var galaxy = <%- JSON.stringify(galaxy) %>;
	var config = <%- JSON.stringify(config) %>;

	var xCoordScale = <%= viewportWidth %>/galaxy.aabb.x.size;
	var yCoordScale = <%= viewportHeight %>/galaxy.aabb.y.size;

	console.log("xCoordScale=" + xCoordScale + " yCoordScale=" + yCoordScale);

	function galaxyToDisplayCoords(obj) {
		var gPos = {x:obj.x, y:obj.y};
		var dPos = {};
		dPos.x = xCoordScale * (gPos.x-galaxy.aabb.x.min);
		dPos.y = yCoordScale * (gPos.y-galaxy.aabb.y.min);
		//console.log("galaxyToDisplayCoords " + JSON.stringify(gPos) + " -> " + JSON.stringify(dPos));
		return dPos;
	}

	function displayToGalaxyCoords(obj) {
		var dPos = {x:obj.x, y:obj.y};
		var gPos = {};
		gPos.x = (dPos.x / xCoordScale) + galaxy.aabb.x.min;
		gPos.y = (dPos.y / yCoordScale) + galaxy.aabb.y.min;
		console.log("displayToGalaxyCoords " + JSON.stringify(dPos) + " -> " + JSON.stringify(gPos));
		return gPos;
	}

	function Star(data, useImage, drawImmediately, graphics)
	{
		//console.log("Star-" + data.id);

		var self = this;

		this.data = data;
		this.starObj = null;
		this.useImage = useImage;
		this.graphics = graphics;

		var pos = galaxyToDisplayCoords(this.data);
		this.x = pos.x;
		this.y = pos.y;

		function selectStarBridge(item, pointer)
		{
			starMap.selectStar(item.gameObject, pointer);
		}

		self.getStarRadius = <%- helper.getStarRadius %>

		this.drawStar = function() {
			if (this.useImage) {
				this.starObj = drawSprite(phaserGame, data.x, data.y, data.type.id, {scale:0.1, gameObject:this}, selectStarBridge);	
			}
			else {
				var isSpecial = false;
				var size = self.getStarRadius(this.data.M);
			    //this.starObj = new Phaser.Circle(this.x, this.y, size);
			    //this.starObj.gameObject = this;
			    var color = isSpecial ? "rgba(255,0,0,1)" : config.stars.classes[this.data.c].color;

			    graphics.beginFill(parseInt(color, 16), 1.0);
			    graphics.drawRect(this.x, this.y, size, size);
			    graphics.endFill();
			}
		}
		
		this.contains = function(point) {
			if (this.starObj.contains(point)) {
				return true;
			}
			return false;
		}

		if (drawImmediately) {
			this.drawStar();
		}

		return this;
	}

	function StarMap()
	{
		var self = this;

		console.log('StarMap');
		this.mapRender = { stars:[], links:[] };
		this.selectedStar = null;
		this.selectionCursor = null;

		//Input
		this.wasTouching = false;
	    this.lastTouchX = 0;
	    this.lastTouchY = 0;
	    this.selectMode = 'select';

	    this.circleMenu = null;

		this.graphics = phaserGame.add.graphics(0, 0);

		self.dimensionKeys = <%- JSON.stringify(helper.dimensionKeys) %>
    	self.getDistanceSquared = <%- helper.getDistanceSquared %>
    	self.getDistance = <%- helper.getDistance %>
    	self.getSectorCoordinates = <%- helper.getSectorCoordinates %>
    	self.generateSpiral = <%- helper.generateSpiral %>
    	self.generateSpirals = <%- helper.generateSpirals %>
    	self.distToSegmentSquared = <%- helper.distToSegmentSquared %>
    	self.getDistanceFromArc = <%- helper.getDistanceFromArc %>
    	self.getDistanceFromAnySpiral = <%- helper.getDistanceFromAnySpiral %>

		function getPoints(posA, posB, ringRadius) {

			var dirV = normalizeVector2( diffVector2(posA, posB) );
			var multiplier = ringRadius;
		
			var points = [];
			points.push( diffVector2(posA, multVector2(multiplier, dirV)) );
			points.push( sumVector2(posB, multVector2(multiplier, dirV)) );
			return points;
		}

		function isStarsLinked(starA, starB) {
			for (var i in map.links) {
				var starA_id = map.links[i][0];
				var starB_id = map.links[i][1];
				if ((starA_id == starA.data.id) && (starB_id == starB.data.id)) {
					return true;
				}
				else if ((starA_id == starB.data.id) && (starB_id == starA.data.id)) {
					return true;
				}
			}
			return false;
		}

		 //  Our BitmapData (same size as our canvas)
	    var bmd = phaserGame.make.bitmapData(<%= viewportWidth %>, <%= viewportHeight %>);

	    //  Add it to the world or we can't see it
	    bmd.addToWorld();

		var gradient = bmd.ctx.createRadialGradient(<%= viewportWidth/2 %>, <%= viewportHeight/2 %>, 
													config.coreSize*0.3, <%= viewportWidth/2 %>, <%= viewportHeight/2 %>, config.coreSize*0.8);
  		gradient.addColorStop(0, 'rgba(200,200,200,1.0)');
  		gradient.addColorStop(1, 'transparent');

		bmd.cls();
		bmd.circle(<%= viewportWidth/2 %>, <%= viewportWidth/2 %>, config.coreSize, gradient);

		this.spirals = self.generateSpirals({x:0, y:0}, config);


		//replace with self.generateSpirals
		for (var sp=0; sp<this.spirals.length; sp++) {
			var arc = this.spirals[sp];

			var width = 25;
			for (var i=1; i<arc.length; i++) {
				var lastPos = galaxyToDisplayCoords(arc[i-1]);
				var nextPos = galaxyToDisplayCoords(arc[i]);

				var color = 'FFFFFF';
				this.graphics.lineStyle(width, parseInt(color, 16), 0.1);
	    		this.graphics.moveTo(lastPos.x, lastPos.y);
	    		this.graphics.lineTo(nextPos.x, nextPos.y);
	    		width -= 0.1;
			}
		}

		/*for (var i in galaxy.links) {
			var starA_id = map.links[i][0];
			var starB_id = map.links[i][1];
			//Fix these, never rely on id order.
			var starA = map.stars[starA_id-1];
			var starB = map.stars[starB_id-1];

			var points = getPoints(starA.pos, starB.pos, this.starRingRadius);

			var color = 'FFFFFF';

			//var link = new Path.Line({
			    from: [points[0].x, points[0].y],
			    to: [points[1].x, points[1].y],
			    strokeColor: color,
			    strokeWidth: this.linkWidth
			});

			this.graphics.lineStyle(this.linkWidth, parseInt(color, 16));
    		this.graphics.moveTo(points[0].x, points[0].y);
    		this.graphics.lineTo(points[1].x, points[1].y);
		}*/

		this.graphics.lineStyle(0);
		
		for (var i in galaxy.stars) {
			var data = galaxy.stars[i];

			var useSprites = false;
			var drawImmediately = true;
			var star = new Star(data, useSprites, drawImmediately, this.graphics);
		    this.mapRender.stars.push(star);
		}

		console.log(this.mapRender.stars.length + " stars loaded");

		this.selectStar = function(star, pointer) {

			//if (this.selectedStar && (this.selectedStar == star)) {
			//	this.openMenu(this.selectedStar, this.selectedFleet);
			//	return;
			//}
			//this.closeMenu();

			this.moveCameraTo(star.data.pos.x, star.data.pos.y);

			this.selectedStar = star;

			/*$('#object-details').empty();
			var html = "";
			html += "<div class='row'><div class='col-md-12'><img src='" + type.img + "'/></div></div>";
			html += "<div class='row'><div class='col-md-12'><b>" + star.data.name + "</b></div></div>";
			html += "<div class='row'><div class='col-md-4'><b>Class:</b></div>";
			html += "<div class='col-md-8'>" + type.name + "</div></div>";
			html += "<div class='row'><div class='col-md-4'><b>Faction:</b></div>";
			html += "<div class='col-md-8'>" + star.getFactionName() + " " + (star.isCapital ? "Capital" : "") + "</div></div>";
			if (this.selectedFleet) {
				html += "<div class='row'><div class='col-md-4'><b>Fleet:</b></div>";
				html += "<div class='col-md-8'>" + this.selectedFleet.data.ships[0] + "</div></div>";
			}
			$('#object-details').html( html );

			$('#object-details-panel').removeClass("collapse");*/

			if (this.selectionCursor == null) {
				/*this.selectionCursor = new Path.Circle({
			        center: new Point(star.data.pos.x, star.data.pos.y),
			        radius: this.starRingRadius+4,
			        strokeColor: 'cyan',
			        strokeWidth: this.linkWidth,
			        dashArray: [6, 4],
			    });*/
			}
			else {
				//this.selectionCursor.position = new Point(star.data.pos.x, star.data.pos.y);
			}
		}

		this.addMenuItem = function(text, cb, radius, x, y, finalX, finalY) {
			var item = drawSprite(phaserGame, x, y, 'hex', {scale:0.001, color:'2980B9', alpha:0.4, gameObject:this}, cb);
			var item = drawSprite(phaserGame, x, y, 'outlineHex', {scale:0.001, color:'2980B9', gameObject:this}, cb);

			phaserGame.add.tween(item).to({ x:finalX, y:finalY }, 500, Phaser.Easing.Quadratic.InOut, true);
			phaserGame.add.tween(item.scale).to({ x:0.06, y:0.06}, 500, Phaser.Easing.Quadratic.InOut, true);
			phaserGame.add.tween(itemOutline).to({ x:finalX, y:finalY }, 500, Phaser.Easing.Quadratic.InOut, true);
			phaserGame.add.tween(itemOutline.scale).to({ x:0.06, y:0.06}, 500, Phaser.Easing.Quadratic.InOut, true);

			this.circleMenuItems.push(item);
			this.circleMenuItems.push(itemOutline);

			var text = phaserGame.add.text(x, y, text, { font: "15px Arial", fill: "#ffffff", align: "center" });
			text.scale.setTo(0.001, 0.001);
			text.anchor.setTo(0.5, 0.5);
			phaserGame.add.tween(text).to({ x:finalX, y:finalY }, 500, Phaser.Easing.Quadratic.InOut, true);
			phaserGame.add.tween(text.scale).to({ x:1, y:1}, 500, Phaser.Easing.Quadratic.InOut, true);

			this.circleMenuTexts.push(text);
		}

		this.openMenu = function(star, fleet) {
			if (this.circleMenu != null) {
				return;
			}

			var items = [];
			items.push({name:'Scan', cb:null});
			if (fleet) {
				items.push({name:'Move', cb:setMoveMode});
				items.push({name:'Dock', cb:null});
			}

			this.circleMenu = openCircleMenu(phaserGame, star.data.pos.x, star.data.pos.y, items, {});
		}

		this.closeMenu = function() {
			if (this.circleMenu == null) {
				return;
			}
			closeCircleMenu(phaserGame, this.circleMenu);
			this.circleMenu = null;
		}

		this.moveCameraTo = function(x, y) {
			var cam = phaserGame.camera;
  			cam.follow(null);
  			phaserGame.add.tween(cam).to(	{ x: x - (cam.width / 2), y: y - (cam.height / 2) }, 
  											750, Phaser.Easing.Quadratic.InOut, true );
		}

		this.update = function() {
			this.updateInput(phaserGame);

			if (this.selectedStar != null) {
				this.selectedStar.selectedUpdate();
			}
    	}

    	this.updateInput = function(pgame) {
    		updateUiInput(pgame, this);
    		updateDragCamera(pgame, this);

    		var pointer = pgame.input.activePointer;
    		if (pointer.isDown) {
    			var now = (new Date()).getTime();
    			if ((this.inputTime == null) || ((this.inputTime + 1000) < now)) {
    				this.inputTime = now;
	    			/*var stars = this.mapRender.stars;
	    			for (var i=0; i<stars.length; i++) {
	    				var star = stars[i];
	    				if (star.starObj.contains(pointer.x, pointer.y)) {
	    					alert(star.data.c);
	    				}
	    			}*/

	    			var pos = displayToGalaxyCoords(pointer);
	    			var sectorCoords = self.getSectorCoordinates(pos, galaxy.aabb);
	    			if (sectorCoords) {
	    				console.log("pointer.isDown sectorCoords=" + JSON.stringify(sectorCoords));
	    				var sector = galaxy.sectors[sectorCoords.x][sectorCoords.y];
	    				//console.log("sector=" + JSON.stringify(sector));

	    				var distFromSpirals = self.getDistanceFromAnySpiral({x:pointer.x, y:pointer.y}, this.spirals);
	    				console.log("distFromSpirals=" + distFromSpirals);

	    				//phaserGame.add.tween(phaserGame.camera.scale).to({ x: 4.0, y: 4.0}, 500, Phaser.Easing.Linear.None, true);
	    				//phaserGame.camera.follow(null)
	    				//phaserGame.add.tween(phaserGame.camera).to({ x:pointer.x-0.5*<%= viewportWidth %>, y:pointer.y-0.5*<%= viewportHeight %>}, 500, Phaser.Easing.Linear.None, true);
	    			}
	    		}
    		}

    		//phaserGame.camera.y -= 4;
    	}

    	this.getStarById = function(starId) {
    		for (var i in this.mapRender.stars) {
				if (this.mapRender.stars[i].data.id == starId) {
					return this.mapRender.stars[i];
				}
			}
			return null;
    	}

    	this.requestWarpFleet = function(fleet, startStar, endStar) {
    		var self = this;
    		var startPos = startStar.data.pos;
    		var endPos = endStar.data.pos;

			jQuery.post( "/game/bridge/warpfleet", {
				fleetId:fleet.data._id,
				sid:this.sid,
				starId:endStar.data.id
			},
			function( updatedFleet ) {
				var points = getPoints(startPos, endPos, self.starRingRadius);
				var dir = diffVector2(startStar.data.pos, endStar.data.pos);
				var travelAngle = phaserGame.physics.arcade.angleBetween({x:0,y:1}, dir) / (2*Math.PI) * 360;
				fleet.warp(endStar, points[0], points[1], travelAngle, updatedFleet.dest.travelTime, updatedFleet.dest.arrivalTime);
			});
		}
	}
</script>


<div class="row">
	<div class="col-md-12">
		<div id="starmap-viewport" style="position:relative; width:<%= viewportWidth %>px;height:<%= viewportHeight %>px;">
		</div>
	</div>
</div>

<script>
	var phaserGame = null;
	var starMap = null;

	window.onload = function() {
		var startTime = new Date().getTime();
		console.log("window.onload started");

		var transparentBG = false;
		phaserGame = new Phaser.Game(<%= viewportWidth %>, <%= viewportHeight %>, Phaser.AUTO, 'starmap-viewport', 
				{ preload: preload,create:create, update:update, render:render }, transparentBG);

		console.log("Phaser init done");
	    function preload () {
	    	console.log("preload");
	        phaserGame.load.image('hex', '/game/starmap/hex.png');
	        phaserGame.load.image('outlineHex', '/game/starmap/outlineHex.png');
	    }

	    function zoomInFunc() {
	    	
	    }

	     function zoomOutFunc() {
	    	phaserGame.camera.scale.x -= 0.01;
	        phaserGame.camera.scale.y -= 0.01;
	    }

	    function create () {
	    	console.log("create");
	    	phaserGame.stage.backgroundColor = "#000000";
	    	phaserGame.world.setBounds(-1*<%= viewportWidth %>, -1*<%= viewportHeight %>, <%= viewportWidth %>*4, <%= viewportHeight %>*4);
	    	cursors = phaserGame.input.keyboard.createCursorKeys();
	    	zoomIn = phaserGame.input.keyboard.addKey(Phaser.Keyboard.ONE);
	    	zoomOut = phaserGame.input.keyboard.addKey(Phaser.Keyboard.TWO);
	    	phaserGame.input.addPointer();

	        starMap = new StarMap();

			//alert("load took " + (new Date().getTime() - startTime) + "ms");
	    }

	    function update() {
		    if (cursors.up.isDown)
	        {
	        	phaserGame.camera.y -= 4;
	        }
	        else if (cursors.down.isDown)
	        {
	        	phaserGame.camera.y += 4;
	        }

	        if (cursors.left.isDown)
	        {
	            phaserGame.camera.x -= 4;
	        }
	        else if (cursors.right.isDown)
	        {
	            phaserGame.camera.x += 4;
	        }

	        if (zoomIn.isDown) {
	        	phaserGame.camera.scale.x += 0.01;
	        	phaserGame.camera.scale.y += 0.01;
	        }

	        if (zoomOut.isDown) {
	        	phaserGame.camera.scale.x -= 0.01;
	        	phaserGame.camera.scale.y -= 0.01;
	        }

	        starMap.update();
		}

		function render() {
		}

	}

	window.onunload = function() {
       console.log("onunload");
    }
</script>